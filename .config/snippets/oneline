make_log:LOG_PATH=./logs/`date "+%Y_%m_%d_%H_%M"`; mkdir -p ${LOG_PATH}
make_datedir:mkdir `date "+%d_%m_%Y"`
systemd:systemctl list-unit-files --type=service


ffmpeg_image2video:ffmpeg -start_number 0 -i %03d.png -vcodec libx264 -pix_fmt yuv420p out.mp4
ffmpeg_video2image:ffmpeg -i [].mp4 -r 60 %03d.png
ffmpeg_video2gif:ffmpeg -i [].mp4 [].gif


gpu_utility:nvidia-smi --query-gpu=timestamp,name,utilization.gpu,utilization.memory,memory.used,memory.free,memory.used --format=csv,noheader
gpu_process:nvidia-smi --query-compute-apps=pid,gpu_bus_id,process_name,used_memory --format=csv,noheader
get_bus_id:lshw -C display -businfo

command_record:asciinema rec [].cast
play_record:asciinema play [].cast
asciicast2gif:docker run --rm -v $PWD:/data asciinema/asciicast2gif [].cast [].gif

latex:platex [].tex; dvipdfmx [].dvi; rm *.aux *.dvi *.log


PYTHON/make_time_stopped:lambda _: datetime.now().strftime(r"%Y_%m_%H_%M")

rsync:rsync -auv dir/ dir/  # 追加分のみをコピー
rsync:rsync -a --exclude-from='exclude_git.txt' ./ /mnt/c/Users/yk.iwabuchi/2022/hoge

git:git rm --cached [file]
homepage:ssh -p 8022 r9286695@www321.onamae.ne.jp
homepage:scp -P 8022 -r r9286695@www321.onamae.ne.jp:public_html/8ucchiman.jp .

docker:docker cp [FILE] cheesesan/[CONTAINER]:/root/
docker:docker commit [CONTAINER] cheesesan/[IMAGE_NAME]:[TAG]


dropbox:dbxcli get [FILE]
dropbox:dbxcli put [FILE]

PATH print:echo $PATH | tr ":" "\n"
ssh:ssh -l bucchiman 192.168.0.0
ssh:ssh -v 192.168.0.0  # サーバーの認証方式確認
ssh:ssh-keygen -y -f .ssh/id_rsa    # yオプションで秘密鍵から公開鍵を再作成
ssh:ssh-keygen -p -f .ssh/id_rsa    # pオプションでパスフレーズ変更
ssh:ssh-add -K .ssh/id_rsa          # ssh-agentに鍵の登録
ssh:ssh-add -l                      # ssh-agentの登録鍵確認
ssh:ssh-add -D                      # 登録されている鍵の削除
ssh:ssh remotehost "ls > ls.log"    # リモートホスト上でログを残す
ssh:ssh remotehost ls > ls.log      # クライアントホスト上でログを残す

ps axo pid,ppid,s,stat,pcpu,pmem,time,start,nice,args,comm,tt,uid,user,gid,group # ppid:親PID, s:プロセスの状態, stat: 複数文字プロセス状態, pcpu: CPUの使用率, pmem: メモリの使用率, time: CPUの累積使用時間, start: コマンドが起動した時刻, nice値(プロセスの優先順位), args: コマンド名(引数あり), comm: コマンド名(実行ファイルのみ), tt: 制御端末, 実行ユーザーのID

redirect:stat -c%N /dev/fd/*    # ファイルディスクリプタのリンク先確認
redirect: 1>/dev/null 2>&1      # stdout/stderrの出力をともに/dev/nullに送る
redirect: 3>&1 1>&2 2>&3-       # stdout/stderrを逆にする
redirect: n>&m                  # nのFDにmのFDが複製される
redirect: &>[]


diff:diff <(ls /usr) <(ls /usr/local)   # コマンド実行結果比較
